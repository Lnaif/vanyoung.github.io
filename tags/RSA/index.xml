<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSA | HumblePoster</title>
    <link>https://p0st3r.github.io/tags/rsa/</link>
      <atom:link href="https://p0st3r.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml" />
    <description>RSA</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Lithium©2016</copyright><lastBuildDate>Wed, 09 May 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://p0st3r.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>RSA</title>
      <link>https://p0st3r.github.io/tags/rsa/</link>
    </image>
    
    <item>
      <title>CTF中RSA的常见攻击方法</title>
      <link>https://p0st3r.github.io/post/rsa-in-ctf/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      <guid>https://p0st3r.github.io/post/rsa-in-ctf/</guid>
      <description>&lt;p&gt;RSA基于一个简单的数论事实，两个大素数相乘十分容易，将其进行因式分解确实困难的。在量子计算机还没有成熟的今天，RSA算法凭借其良好的抵抗各种攻击的能力，在公钥密码体制中发挥着中流砥柱的作用。然而即便RSA算法目前来说是安全可靠的，但是错误的应用场景，错误的环境配置，以及错误的使用方法，都会导致RSA的算法体系出现问题，从而也派生出针对各种特定场景下的RSA攻击方法。&lt;/p&gt;
&lt;h3 id=&#34;rsa算法描述&#34;&gt;RSA算法描述&lt;/h3&gt;
&lt;p&gt;RSA算法涉及三个参数，n，e，d，私钥为{n，d}，公钥为{n，e}。&lt;/p&gt;
&lt;p&gt;$n= p*q$&lt;/p&gt;
&lt;p&gt;$φ(n)= (p-1)*(q-1)$&lt;/p&gt;
&lt;p&gt;其中n是两个大素数p，q的乘积。&lt;/p&gt;
&lt;p&gt;d是e模φ(n)的逆元，φ(n)是n的欧拉函数。&lt;/p&gt;
&lt;p&gt;$e^d = 1 mod φ(n)$&lt;/p&gt;
&lt;p&gt;c为密文，m为明文，则加密过程如下：&lt;/p&gt;
&lt;p&gt;$c = m^e mod  φ(n)$
$m = c^d mod φ(n)$&lt;/p&gt;
&lt;h3 id=&#34;rsa题目类型&#34;&gt;RSA题目类型&lt;/h3&gt;
&lt;p&gt;在CTF竞赛中，RSA理所当然处在CRYPTO中居多。而且RSA作为典型的加密算法，其出镜率可谓相当高，基本上所有比赛都会有几道RSA的题目出现。&lt;/p&gt;
&lt;h3 id=&#34;数据处理&#34;&gt;数据处理&lt;/h3&gt;
&lt;p&gt;在进行做题之前，我们要将数据处理成可以做题的模式。基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pem文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对此类文件可以直接使用openssl提取，大概使用过的方式有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl   rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc
openssl   rsa -pubin -text -modulus -in warmup -in public.pem
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;pcap文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PPC模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。&lt;/p&gt;
&lt;p&gt;第二个需要处理的就是明密文，这个方法多多，不多赘述。&lt;/p&gt;
&lt;h2 id=&#34;模数分解&#34;&gt;模数分解&lt;/h2&gt;
&lt;p&gt;解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。&lt;/p&gt;
&lt;p&gt;$φ(n) = (p-1)(q-1)$
$n = p*q$&lt;/p&gt;
&lt;p&gt;而通过e，d与n的欧拉函数满足如下关系:&lt;/p&gt;
&lt;p&gt;$ed = 1 mod φ(n)$&lt;/p&gt;
&lt;p&gt;$e = d^-1 mod φ(n)$&lt;/p&gt;
&lt;p&gt;通过欧几里得算法可以通过e与n的欧拉函数的值轻易求出d，从而计算出解密密钥。&lt;/p&gt;
&lt;p&gt;即在知道e，p，q的情况下，可以解出d：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;egcd&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (b, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
      g, y, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; egcd(b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; a, a)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (g, x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y, y)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modinv&lt;/span&gt;(a, m):
    g, x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; egcd(a, m)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modular inverse does not exist&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;modinv函数即为求模拟的函数，在知道e，p，q的情况下，可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d=modinv(e,(p-1)*(q-1))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即可求出解密密钥。&lt;/p&gt;
&lt;p&gt;写到这里，要提出一个细节问题，在利用python进行rsa的题目求解过程中：&lt;/p&gt;
&lt;p&gt;$c = m^e mod φ(n)$&lt;/p&gt;
&lt;p&gt;​     此类运算需要使用pow函数来进行求解，而不是直接m**e % n，这样会慢死的。Python在处理此类运算进行了优化。比如刚才在已知p，q的时候利用modinv函数求出了d，然后就可以利用pow函数求出明文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m=pow(c,d,n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例题：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jarvisoj.com&#34;&gt;https://www.jarvisoj.com&lt;/a&gt; (very easy RSA)&lt;/p&gt;
&lt;p&gt;题目中直接给了p，q，e。&lt;/p&gt;
&lt;p&gt;可以直接求出d：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3487583947589437589237958723892346254777&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8767867843568934765983476584376578389&lt;/span&gt;
e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; modinv(e, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;直接分解n&#34;&gt;直接分解n&lt;/h3&gt;
&lt;p&gt;素数分解问题是困难的，但是可以通过计算机进行暴力分解。1999年，名为Cray的超级计算机用了5个月时间分解了512bit的n。2009年，一群研究人员成功分解了768bit的n。2010年，又提出了一些针对1024bit的n的分解的途径，但是没有正面分解成功。通常意义上来说，一般认为2048bit以上的n是安全的。现在一般的公钥证书都是4096bit的证书。&lt;/p&gt;
&lt;p&gt;如果n比较小，那么可以通过工具进行直接n分解，从而得到私钥。如果n的大小小于256bit，那么我们通过本地工具即可爆破成功。例如采用windows平台的RSATool2v17，可以在几分钟内完成256bit的n的分解。&lt;/p&gt;
&lt;p&gt;如果n在768bit或者更高，可以尝试使用一些在线的n分解网站，这些网站会存储一些已经分解成功的n，比如：
&lt;a href=&#34;http://factordb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://factordb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过在此类网站上查询n，如果可以分解或者之前分解成功过，那么可以直接得到p和q。然后利用前述方法求解得到密文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此类问题一般是分值较小的题目，提取出n之后可以发现n的长度小于等于512bit，可以直接取分解n。如果大于512bit，建议在使用每个题目都用后面所说的方法去解题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如在某次竞赛中，发现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n=87924348264132406875276140514499937145050893665602592992418171647042491658461
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用factordb分解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 275127860351348928173285174381581152299*319576316814478949870590164193048041239
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;利用公约数&#34;&gt;利用公约数&lt;/h3&gt;
&lt;p&gt;如果在两次公钥的加密过程中使用的n1和n2具有相同的素因子，那么可以利用欧几里得算法直接将n1和n2分解。&lt;/p&gt;
&lt;p&gt;通过欧几里得算法可以直接求出n1和n2的最大公约数p：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcd(n1,n2)=p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以得出&lt;/p&gt;
&lt;p&gt;$n1 = p&lt;em&gt;q_1$
$n2 = p&lt;/em&gt;q_2$&lt;/p&gt;
&lt;p&gt;直接分解成功。而欧几里得算法的时间复杂度为：O(log n)。这个时间复杂度即便是4096 bit也是秒破级别。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(a, b):
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b:
     a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b, a
   &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
     temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b
     a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b
     b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;识别此类题目，通常会发现题目给了若干个n，均不相同，并且都是2048bit，4096bit级别，无法正面硬杠，并且明文都没什么联系，e也一般取65537。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个题目中，你拿到了两个n，e都为65537，两个n分别为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n1=9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327
n2=13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过直接分解，上factordb都分解失败。通过尝试发现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print gcd(n1,n2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打印出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1564859779720039565508870182569324208117555667917997801104862601098933699462849007879184203051278194180664616470669559575370868384820368930104560074538872199213236203822337186927275879139590248731148622362880471439310489228147093224418374555428793546002109
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则此致即为两个n共有的素因子p，然后进一步求出q，求解完毕。&lt;/p&gt;
&lt;h3 id=&#34;fermat方法与pollard-rho方法&#34;&gt;Fermat方法与Pollard rho方法&lt;/h3&gt;
&lt;p&gt;针对大整数的分解有很多种算法，性能上各有优异，有Fermat方法，Pollard rho方法，试除法，以及椭圆曲线法，连分数法，二次筛选法，数域分析法等等。其中一些方法应用在RSA的攻击上也有奇效。&lt;/p&gt;
&lt;p&gt;在p，q的取值差异过大，或者p，q的取值过于相近的时候，Format方法与Pollard rho方法都可以很快将n分解成功。&lt;/p&gt;
&lt;p&gt;此类分解方法有一个开源项目yafu将其自动化实现了，不论n的大小，只要p和q存在相差过大或者过近时，都可以通过yafu很快地分解成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在直接分解n无望，不能利用公约数分解n之后，都应该使用yafu去试一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jarvisoj.com&#34;&gt;https://www.jarvisoj.com&lt;/a&gt; (Medium RSA)&lt;/p&gt;
&lt;p&gt;此题首先从pem中提取N和e，然后上yafu，直接分解成功。&lt;/p&gt;
&lt;h2 id=&#34;低加密指数攻击&#34;&gt;低加密指数攻击&lt;/h2&gt;
&lt;p&gt;在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。&lt;/p&gt;
&lt;h3 id=&#34;e3时的小明文攻击&#34;&gt;e=3时的小明文攻击&lt;/h3&gt;
&lt;p&gt;当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;$c = m^e mod φ(n)$&lt;/p&gt;
&lt;p&gt;如果e=3，且 m^e &amp;lt; n，那么：&lt;/p&gt;
&lt;p&gt;$c = m^e$
$e = 3$
$m = \sqrt{3} c$&lt;/p&gt;
&lt;p&gt;如果明文的三次方比n大，但是不是足够大，那么设k，有：&lt;/p&gt;
&lt;p&gt;$c = m^e+kn$&lt;/p&gt;
&lt;p&gt;爆破k，如果$c-kn$能开三次根式，那么可以直接得到明文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在e=3的时候首先尝试这种方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jarvisoj.com&#34;&gt;https://www.jarvisoj.com&lt;/a&gt; (Extremely hard RSA)&lt;/p&gt;
&lt;p&gt;关键代码如下：此题通过不断给明文+n开三次方即可求得：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(gmpy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;root(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;N, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
     &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; gmpy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;root(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;N, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
     &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
   i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;低加密指数广播攻击&#34;&gt;低加密指数广播攻击&lt;/h3&gt;
&lt;p&gt;如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。&lt;/p&gt;
&lt;p&gt;即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有：&lt;/p&gt;
&lt;p&gt;$ c_1 = m^e$ $mod$ $n_1$&lt;/p&gt;
&lt;p&gt;$c_2 = m^e$ $mod$ $n_2$&lt;/p&gt;
&lt;p&gt;$ c_3 = m^e$ $mod$ $n_3$&lt;/p&gt;
&lt;p&gt;对上述等式运用中国剩余定理，在e=3时，可以得到：&lt;/p&gt;
&lt;p&gt;$ c_x =  m^3$ $mod$ $n_1n_2n_3$&lt;/p&gt;
&lt;p&gt;通过对$ c_x $进行三次开方可以求得明文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SCTF2016，CODE300&lt;/p&gt;
&lt;p&gt;题目第二轮中通过流量包的方式给了广播攻击的参数。&lt;/p&gt;
&lt;p&gt;直接给国外类似一题的网址：&lt;a href=&#34;http://codezen.fr/2014/01/16/hackyou-2014-crypto-400-cryptonet&#34;&gt;http://codezen.fr/2014/01/16/hackyou-2014-crypto-400-cryptonet&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;coppersmith定理攻击&#34;&gt;Coppersmith定理攻击&lt;/h3&gt;
&lt;p&gt;Coppersmith定理指出在一个e阶的mod n多项式f(x)中，如果有一个根小于，就可以运用一个O(log n)的算法求出这些根。&lt;/p&gt;
&lt;p&gt;Coppersmith定理指出在一个e阶的mod n多项式f(x)中，如果有一个根小于$ n^frac{1}{e} $，就可以运用一个O(log n)的算法求出这些根。&lt;/p&gt;
&lt;p&gt;这个定理可以应用于RSA算法。如果e = 3并且在明文当中只有三分之二的比特是已知的，这种算法可以求出明文中所有的比特。&lt;/p&gt;
&lt;p&gt;并未找到真题。&lt;/p&gt;
&lt;h2 id=&#34;低解密指数攻击&#34;&gt;低解密指数攻击&lt;/h2&gt;
&lt;p&gt;与低加密指数相同，低解密指数可以加快解密的过程，但是者也带来了安全问题。&lt;/p&gt;
&lt;p&gt;那么一种基于连分数(一个数论当中的问题)的特殊攻击类型就可以危害RSA的安全。此时需要满足：&lt;/p&gt;
&lt;p&gt;$q&amp;lt;$$p$$&amp;lt;2q$&lt;/p&gt;
&lt;p&gt;如果满足上述条件，通过Wiener Attack可以在多项式时间中分解n。&lt;/p&gt;
&lt;p&gt;rsa-wiener-attack的攻击源码开源在了github中，采取python编写，可以很容易使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;e看起来很大就行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接github用工具就行。&lt;a href=&#34;https://github.com/pablocelayes/rsa-wiener-attack&#34;&gt;https://github.com/pablocelayes/rsa-wiener-attack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt;   sys
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setrecursionlimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;共模攻击&#34;&gt;共模攻击&lt;/h2&gt;
&lt;p&gt;如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。即：&lt;/p&gt;
&lt;p&gt;$ c_1=m^{e_1}$ $mod$ $n$&lt;/p&gt;
&lt;p&gt;$ c_2=m^{e_2}$ $mod$ $n$&lt;/p&gt;
&lt;p&gt;即存在$ s_2 $，$ s_2 $使得：&lt;/p&gt;
&lt;p&gt;$ s1^{e_1} + s2^{e_2} = 1 $&lt;/p&gt;
&lt;p&gt;又因为&lt;/p&gt;
&lt;p&gt;$ c_1= m^{e_1}$ $mod$ $n$&lt;/p&gt;
&lt;p&gt;$ c_2 = m^{e_2}$ $mod$ $n$&lt;/p&gt;
&lt;p&gt;明文解出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目识别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非常简单，若干次加密，每次n都一样，明文根据题意也一样即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jarvisoj.com&#34;&gt;https://www.jarvisoj.com&lt;/a&gt; (very  hard RSA)&lt;/p&gt;
&lt;p&gt;如果已知：n1，n2，c1，c2，e1，e2，并且其中n1=n2的话：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; egcd(e1, e2)
 s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
 s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
   &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; s
 n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n1
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
     s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; s1
     c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; modinv(c1, n)
   &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; s2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
     s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; s2
     c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; modinv(c2, n)
 m&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(pow(c1,s1,n)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pow(c2,s2,n)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
